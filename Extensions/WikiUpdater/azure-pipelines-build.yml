name: $(Major).$(Minor).$(rev:r)  # build numbering format

trigger:
  branches:
    include: [ main ] # branch names which will trigger a build
  paths:
    include: [ /Extensions/WikiUpdater ] # file paths which must match to trigger a build, cannot be a variable

pr: # will trigger on PR
  branches:
    include: [ main ] # branch names which will trigger a build
  paths:
    include: [ /Extensions/WikiUpdater ] # file paths which must match to trigger a build, cannot be a variable

resources:
  repositories: # the test data
    - repository: VSTSBuildTaskValidation
      type: git
      name: VSTSBuildTaskValidation
      branch: master

variables:
  # declared in the pipeline UI
  #  major
  #  minor
  - group:  'WIKIUpdater Extension'
    # this group includes the following variables
    #  ExtensionRoot - working folder
    #  PublisherID  - Marketplace publisher
    #  ExtensionID - Marketplace extension id
    #  vmImage - name of Azure DevOps pool to use
    #  artifactLocationName -  folder the artifact to push is stored in
    #  privateExtentionsTag - tag to show if private (else blank)
    #  taskID - Marketplace ID of task
    #  wikiFilename - name of generated docs files
    #  githubPAT - for testing
    #  AzureDevOpsPAT - for testing
stages:
  - stage: Build
    jobs:
    - job: Build
      pool:
        vmImage: '$(vmImage)'
        demands: npm
      steps:
      # we have inject the version to the V3 package in a special way
      # the stand way (using TFX) fails when multi versions in the same package
      - powershell: |
          $rev = "$(build.buildnumber)".Split('.')[2]
          Write-Host "Setting 'Rev' Variable to $rev"
          Write-Output ("##vso[task.setvariable variable=rev;]$rev")
        displayName: 'Extract patch from build number'

      # version all the task in the extension
      - task: qetza.replacetokens.replacetokens-task.replacetokens@6
        displayName: 'Setting the version for tasks in extension WikiUpdaterTask'
        inputs:
          rootDirectory: '$(Build.SourcesDirectory)/$(ExtensionRoot)'
          targetFiles: 'WikiUpdaterTask\\WikiUpdaterTaskV3\\**\\task.json'
        
      - task: qetza.replacetokens.replacetokens-task.replacetokens@6
        displayName: 'Setting the version for tasks in extension WikiFolderUpdaterTaskV3'
        inputs:
          rootDirectory: '$(Build.SourcesDirectory)/$(ExtensionRoot)'
          targetFiles: 'WikiFolderUpdaterTask\\WikiFolderUpdaterTaskV3\\**\\task.json'

      # for each Node based task we must transpile it
      - template: ..\..\YAMLTemplates\build-node-task.yml
        parameters:
          extensionRoot: '$(ExtensionRoot)\WikiUpdaterTask'
          taskName: 'WikiUpdaterTaskV2'

      - template: ..\..\YAMLTemplates\build-node-task.yml
        parameters:
          extensionRoot: '$(ExtensionRoot)\WikiUpdaterTask'
          taskName: 'WikiUpdaterTaskV3'

      # for each Node based task we must transpile it
      - template: ..\..\YAMLTemplates\build-node-task.yml
        parameters:
          extensionRoot: '$(ExtensionRoot)\WikiFolderUpdaterTask'
          taskName: 'WikiFolderUpdaterTaskV2'

      - template: ..\..\YAMLTemplates\build-node-task.yml
        parameters:
          extensionRoot: '$(ExtensionRoot)\WikiFolderUpdaterTask'
          taskName: 'WikiFolderUpdaterTaskV3'

      - task: TfxInstaller@3
        displayName: 'Install Tfx Tool'
        inputs:
          version: 'v0.8.x'

      - task: ms-devlabs.vsts-developer-tools-build-tasks.package-extension-build-task.PackageVSTSExtension@3
        displayName: 'Package and Publish Extension as a PROD Package '
        inputs:
          rootFolder: '$(ExtensionRoot)'
          outputPath: '$(Build.ArtifactStagingDirectory)\\$(artifactLocationName)'
          publisherId: '$(PublisherID)'
          extensionId: '$(ExtensionID)'
          extensionVersion: '$(Build.BuildNumber)'
          updateTasksVersion: true
          extensionVisibility: public

      - task: CopyFiles@2
        displayName: 'Copy Docs'
        inputs:
          SourceFolder: $(ExtensionRoot)
          Contents: |
            readme.md
            vss-extension.json
            **\task\task.json
          TargetFolder: '$(Build.ArtifactStagingDirectory)\\$(artifactLocationName)'

      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'vsix'
          targetPath: '$(Build.ArtifactStagingDirectory)\\$(artifactLocationName)'

  - stage: Private
    jobs:
    - deployment: Private_Deployment
      timeoutInMinutes: 0
      environment: 'Azure DevOps Marketplace (Private)'
      pool:
        vmImage: '$(vmImage)'
      strategy:
        runOnce:
          deploy:
            steps:
            # we don't need to DownloadPipelineArtifact as this is done automatically
            - template: ..\..\YAMLTemplates\publish-extension.yml
              parameters:
                 vsixPath: '$(Agent.BuildDirectory)\\$(artifactLocationName)\\$(PublisherID).$(ExtensionID)-$(Build.BuildNumber).vsix'
                 extensionTag: '$(privateExtentionsTag)'
                 extensionVisibility: private

  - stage: Test_Windows
    dependsOn: Private
    jobs:
    - deployment: Private_Test_Single_File_Windows
      timeoutInMinutes: 0
      environment: 'Azure DevOps Marketplace (WIKIUpdater)'
      pool:
        vmImage: windows-latest
      strategy:
        runOnce:
          deploy:
            steps:
            - template: .\single-file-test-steps.yml
              parameters:
                platform: windows

    - deployment: Private_Test_Multi_File_Windows
      timeoutInMinutes: 0
      environment: 'Azure DevOps Marketplace (WIKIUpdater)'
      pool:
          vmImage: windows-latest 
      strategy:
        runOnce:
          deploy:
            steps:
            - template: .\multi-file-test-steps.yml
              parameters:
                platform: windows

  - stage: Test_Linux
    dependsOn: Private
    jobs:
    - deployment: Private_Test_Single_File_Linux
      timeoutInMinutes: 0
      environment: 'Azure DevOps Marketplace (WIKIUpdater)'
      pool:
        vmImage: ubuntu-latest
      strategy:
        runOnce:
          deploy:
            steps:
            - template: .\single-file-test-steps.yml
              parameters:
                platform: linux

    - deployment: Private_Test_Multi_File_Linux
      timeoutInMinutes: 0
      environment: 'Azure DevOps Marketplace (WIKIUpdater)'
      pool:
          vmImage: ubuntu-latest
      strategy:
        runOnce:
          deploy:
            steps:
            - template: .\multi-file-test-steps.yml
              parameters:
                platform: linux

  - stage: Test_Mac
    dependsOn: Private
    jobs:
    - deployment: Private_Test_Single_File_Mac
      timeoutInMinutes: 0
      environment: 'Azure DevOps Marketplace (WIKIUpdater)'
      pool:
        vmImage: macOS-latest 
      strategy:
        runOnce:
          deploy:
            steps:
            - template: .\single-file-test-steps.yml
              parameters:
                platform: windows

    - deployment: Private_Test_Multi_File_Windows_Mac
      timeoutInMinutes: 0
      environment: 'Azure DevOps Marketplace (WIKIUpdater)'
      pool:
          vmImage: macOs-latest 
      strategy:
        runOnce:
          deploy:
            steps:
            - template: .\multi-file-test-steps.yml
              parameters:
                platform: Mac

  - stage: Documentation
    dependsOn: 
      - Test_Windows
      - Test_Linux
      - Test_Mac
    pool:
      vmImage: '$(vmImage)'
    variables:
    - group: 'WIKI Updater'
    # provides the variable
    #   gitemail - used in the Git Config
    #   gitName - used in the Git Config
    #   githubpat - used to authenticate to repo
    #   user - used to authenticate to repo
    #   repo - url of repo (without HTTPS://)
    jobs:
    - deployment: Documentation
      timeoutInMinutes: 0
      environment: 'Azure DevOps Marketplace (Documentation)'
      pool:
        vmImage: '$(vmImage)'
      strategy:
        runOnce:
          deploy:
            steps:
              - template: ..\..\YAMLTemplates\generate-wiki-docs.yml
                parameters:
                  workingDirectory: '$(Agent.BuildDirectory)/$(artifactLocationName)'
                  wikiFilename: '$(wikiFilename)'
                  repo: '$(repo)'
                  gitname: '$(GitName)'
                  gitemail: '$(GitEmail)'
                  UserName: '$(UserName)'
                  GitHubPat: '$(GitHubPat)'

  - stage: Public
    dependsOn: Documentation
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
    - deployment: Public_Deployment
      timeoutInMinutes: 0
      environment: 'Azure DevOps Marketplace (Public)'
      pool:
        vmImage: '$(vmImage)'
      strategy:
        runOnce:
          deploy:
            steps:
              # we don't need to DownloadPipelineArtifact as this is done automatically
              - template: ..\..\YAMLTemplates\publish-extension.yml
                parameters:
                   vsixPath: '$(Agent.BuildDirectory)\\$(artifactLocationName)\\$(PublisherID).$(ExtensionID)-$(Build.BuildNumber).vsix'
                   extensionTag: ''
                   extensionVisibility: public

    - job: Post_Publish
      dependsOn: Public_Deployment
      variables:
      - group: socialMedia
      pool:
        vmImage: '$(vmImage)'
      steps:
        - template: ..\..\YAMLTemplates\post-publish.yml
          parameters:
            buildNumber: $(Build.BuildNumber)
            extensionName: $(Build.DefinitionName)
            socialmediaLogicAppURL: $(socialmediaLogicAppURL)